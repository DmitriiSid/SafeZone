# -*- coding: utf-8 -*-
"""RUIAN adresy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19iTZroD1s748edHdj8JVIr_4Z2dVhnYT
"""

import pandas as pd
import requests
import re

# Load your data
file_path = '/content/drive/MyDrive/maps_results.xlsx'
df = pd.read_excel(file_path, sheet_name='Sheet1')

# Function to parse address components
def parse_address(address):
    street = re.search(r'^([^\d,]+)', address).group(0).strip()
    cp_match = re.search(r'\d+(/\d+)?', address)
    if cp_match:
        cp_parts = cp_match.group(0).split('/')
        house_number = cp_parts[0]
        orientation_number = cp_parts[1] if len(cp_parts) > 1 else ''
    else:
        house_number = ''
        orientation_number = ''
    municipality_zip = re.search(r'\d{3} \d{2}', address).group(0)
    municipality = re.search(r',\s*([^,]+)\s*\d{3} \d{2}', address).group(1).strip()
    return street, house_number, municipality, orientation_number, municipality_zip

# Apply parsing function to each row
df[['Street', 'Cp', 'Municipality Name', 'Orientation_number', 'Zip']] = df['Address'].apply(
    lambda x: pd.Series(parse_address(x))
)

# Function to get standardized address from RUIAN API
def get_standardized_address(row):
    base_url = "https://ruian.fnx.io/api/v1/ruian/validate"
    api_key = "f14dfd0b162c72ede99889c7d071b448becd245f2edb2d5f2f4e6b8faee1cd2e"  # Replace with your actual API key

    params = {
        "apiKey": api_key,
        "municipalityName": row['Municipality Name'],
        "zip": row['Zip'].replace(' ', ''),
        "cp": row['Cp'],
        "co": row['Orientation_number'],
        "street": row['Street']
    }

    response = requests.get(base_url, params=params)
    if response.status_code == 200:
        data = response.json()
        if data['status'] in ["POSSIBLE", "MATCH"]:
            place = data['place']
            if place['co']:
                standardized_address = f"{place['streetName']} {place['cp']}/{place['co']}, {place['municipalityName']} {place['zip']}"
            else:
                standardized_address = f"{place['streetName']} {place['cp']}, {place['municipalityName']} {place['zip']}"
            return standardized_address
        else:
            return None
    else:
        return None

# Apply the function to each address in the dataframe
df['Standardized Address'] = df.apply(get_standardized_address, axis=1)

# Save the updated dataframe to a new Excel file
output_file_path = '/content/drive/MyDrive/maps_results_ruian.xlsx'
df.to_excel(output_file_path, index=False)

print(f"Standardized addresses saved to {output_file_path}")